set(LAYER_APPLICATION_COMPILE_DEFS "")
set(LAYER_APPLICATION_INCLUDE_DIRS "")

# zlib, lib64

set( libb64_src
    ${CMAKE_CURRENT_SOURCE_DIR}/external_libraries/libb64/cdecode.c
    ${CMAKE_CURRENT_SOURCE_DIR}/external_libraries/libb64/cencode.c
)
add_library(b64 STATIC ${libb64_src})

set(LAYER_APPLICATION_COMPILE_DEFS "${LAYER_APPLICATION_COMPILE_DEFS};_USE_ZLIB")
set(LAYER_APPLICATION_COMPILE_DEFS "${LAYER_APPLICATION_COMPILE_DEFS};_USE_LIBB64")

# hdf5
if(DEFINED $ENV{HDF5_ROOT})
    # SET(HDF5_DIR $ENV{HDF5_ROOT}/share/cmake/hdf5)
    # FIND_PACKAGE(HDF5 QUIET NAMES hdf5 hdf5_cpp)
    find_package(HDF5 REQUIRED COMPONENTS CXX)
    set(HDF5_PROVIDED TRUE)
elseif(DEFINED HDF5_ROOT)
    # SET(HDF5_DIR ${HDF5_ROOT}/share/cmake/hdf5)
    find_package(HDF5 REQUIRED COMPONENTS CXX)
    set(HDF5_PROVIDED TRUE)
else()
    set(HDF5_PROVIDED FALSE)
endif()

set(LAYER_APP_USE_HDF5 FALSE)
if(${HDF5_PROVIDED} MATCHES TRUE)
    # message("HDF5_INCLUDE_DIR: " ${HDF5_INCLUDE_DIR})
    # message("HDF5_LIBRARIES: " ${HDF5_LIBRARIES})
    set(LAYER_APPLICATION_COMPILE_DEFS "${LAYER_APPLICATION_COMPILE_DEFS};LAYER_APP_USE_HDF5")
    set(LAYER_APPLICATION_INCLUDE_DIRS "${LAYER_APPLICATION_INCLUDE_DIRS};${HDF5_INCLUDE_DIR}")
    set(LAYER_APP_USE_HDF5 TRUE)
    message("LayerApplication uses HDF5, includes = " ${HDF5_INCLUDE_DIR} ", libraries = " ${HDF5_LIBRARIES})
else()
    message("LayerApplication does not uses HDF5")
endif()

# mmg
if((DEFINED $ENV{MMG_DIR}) OR (DEFINED MMG_DIR))
    find_package(MMG REQUIRED)
    set(LAYER_APPLICATION_INCLUDE_DIRS "${LAYER_APPLICATION_INCLUDE_DIRS};${MMG_INCLUDE_DIRS}")
    set(LAYER_APPLICATION_COMPILE_DEFS "${LAYER_APPLICATION_COMPILE_DEFS};LAYER_APP_USE_MMG")
    set(LAYER_APP_USE_MMG TRUE)
    message("LayerApplication uses MMG, includes = " ${MMG_INCLUDE_DIRS} ", libraries = " ${MMG_LIBRARIES})
else()
    set(LAYER_APP_USE_MMG FALSE)
    message("LayerApplication does not use MMG")
endif()

######### add compilation units here
set( KRATOS_LAYER_APPLICATION_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_conditions/post_condition.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_elements/post_element.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_elements/post_ups_element.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/gidpost_binary_reader.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/model_part_utilities.cpp
)

set_property(SOURCE ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/model_part_utilities.cpp APPEND_STRING PROPERTY COMPILE_DEFINITIONS "PROFILING_LEVEL=1")

if(${LAYER_APP_USE_MMG} MATCHES TRUE)
    set( KRATOS_LAYER_APPLICATION_SOURCES
        ${KRATOS_LAYER_APPLICATION_SOURCES}
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/mmg_mesher.cpp
    )
endif()

set( KRATOS_LAYER_APPLICATION_SOURCES
    ${KRATOS_LAYER_APPLICATION_SOURCES}
    ${CMAKE_CURRENT_SOURCE_DIR}/layer_application_variables.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/layer_application.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_utilities_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_io_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_parameter_list_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/layer_python_application.cpp
)
#######################################################################

## define library Kratos which defines the basic python interface
add_library(KratosLayerApplication SHARED ${KRATOS_LAYER_APPLICATION_SOURCES})
if(MSVC)
    target_compile_options(KratosLayerApplication PRIVATE $<$<CONFIG:Debug>:/bigobj>)
endif()

# facilitate the dependencies of the application
add_library(KratosLayerApplicationDependencies INTERFACE)
target_link_libraries(KratosLayerApplicationDependencies INTERFACE zlibstatic)
target_link_libraries(KratosLayerApplicationDependencies INTERFACE b64)
if(${LAYER_APP_USE_HDF5} MATCHES TRUE)
    target_link_libraries(KratosLayerApplicationDependencies INTERFACE ${HDF5_LIBRARIES})
endif()
if(${LAYER_APP_USE_MMG} MATCHES TRUE)
    target_link_libraries(KratosLayerApplicationDependencies INTERFACE ${MMG_LIBRARIES})
endif()

# officially link to the core and dependencies
target_link_libraries(KratosLayerApplication PUBLIC KratosCore)
target_link_libraries(KratosLayerApplication PUBLIC KratosLayerApplicationDependencies)

target_include_directories(KratosLayerApplication PUBLIC ${LAYER_APPLICATION_INCLUDE_DIRS})
target_include_directories(KratosLayerApplication PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_compile_definitions(KratosLayerApplication PRIVATE KRATOS_CORE=IMPORT)
target_compile_definitions(KratosLayerApplication PRIVATE LAYER_APPLICATION=EXPORT)
target_compile_definitions(KratosLayerApplication PUBLIC ${LAYER_APPLICATION_COMPILE_DEFS})

set_target_properties(KratosLayerApplication PROPERTIES PREFIX "")
install(TARGETS KratosLayerApplication DESTINATION libs )
#######################################################################

## changing the .dll suffix to .pyd for Windows compatibility
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set_target_properties(KratosLayerApplication PROPERTIES SUFFIX .pyd)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
#######################################################################

## install application's python script if required
if(${INSTALL_PYTHON_FILES} MATCHES ON)
  get_filename_component (CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/python_scripts DESTINATION applications/${CURRENT_DIR_NAME}  FILES_MATCHING PATTERN "*.py"  PATTERN ".svn" EXCLUDE)
endif(${INSTALL_PYTHON_FILES} MATCHES ON)
#######################################################################

## Add to the KratosMultiphysics Python module
install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/LayerApplication.py" DESTINATION KratosMultiphysics )
#######################################################################
